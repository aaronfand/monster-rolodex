{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","resp","json","users","this","filteredMonsters","filter","m","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAMaA,G,kBAAO,SAACC,GAAD,OACnB,sBAAMC,UAAU,iBAAhB,UACA,qBAAMC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,mCAA6BL,EAAMI,QAAQE,KAA3C,MAASN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,aCJNC,EAAW,SAACR,GAExB,OADAS,QAAQC,IAAIV,GACL,qBAAKC,UAAU,YAAf,SAEND,EAAMW,SAASC,KAAK,SAAAR,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNTQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,uBACCd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCGG,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEASO,IAAD,OAClBI,MAAM,8CACLC,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BASjC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAAC,GAAC,OACzCA,EAAE3B,KAAK4B,cAAcC,SAASd,EAAYa,kBAG5C,OACE,sBAAKjC,UAAU,MAAf,UACE,oDAEA,cAAC,EAAD,CACEa,YAAY,iBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e18218ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\n\r\n\r\nexport const Card = (props) => (\r\n\t<div  className=\"card-container\">\r\n\t<img  alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n\t<h2 key={props.monster.id}> {props.monster.name} </h2> \r\n\t<p>{props.monster.email}</p>\r\n\t</div>\r\n)\r\n","import React from 'react';\r\n\r\nimport './card-list.styles.css';\r\nimport { Card }  from '../card/card.component';\r\n\r\n\r\nexport const CardList = (props) => {\r\n\tconsole.log(props);\r\n\treturn <div className='card-list'>\r\n\t{\r\n\t\tprops.monsters.map( monster => (\r\n\t\t\t<Card key={monster.id} monster={monster}></Card>\r\n\t\t))\r\n\t}\r\n\t</div>\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n\t<input \r\n\t\tclassName=\"search\" \r\n\t\ttype='search' \r\n\t\tplaceholder={placeholder}\r\n\t\tonChange={handleChange}\r\n\t/>\r\n)","import React, { Component } from 'react';\n\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then( resp => resp.json())\n    .then( users => this.setState({monsters: users}));\n  }\n\n    \n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( m => \n      m.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n\n        <SearchBox \n          placeholder=\"Search monster\"\n          handleChange={this.handleChange}\n          />\n          \n        <CardList monsters={filteredMonsters} />      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}